Steps are entered into the "Steps Input:" text box; one step per line.
Blank lines are ignored.
Lines can be commented out with two forward slashes at the start of the line ("//"). Commented lines will be ignored.

Step syntax:
<Command>/<parameter(s)>

The Command and parameters are separated by a foreward slash "/"
    White space before and after the slash is ignored
	So,
	    <Command>/<parameter(s)>
		<Command>/ <parameter(s)>
		<Command> / <parameter(s)>
	all get read the same way.
	
If a Command takes multiple parameters, they are also separated by foreward slashes.

The parsing of Commands and parameters is generally case sensitive.

Parameters can generally contain any character except "/" which is reserved for use as a command-parameter separator.

Parameters can contain key references, demarked by "{" and "}". The parser will replace the text, "{<key>}" with "<value>", where <key> and <value> are a key-value pair in the Metadata Dictionary (see below).
	For example, the input step:
		UserPrompt/ Test/ abc {testKey} def {testKey} ghi
	get's parsed as:
		User Prompt/ Test/ abc testValue def testValue ghi
Key references that are not in the Metadata Dictionary will result in a Validation failure.


Commands:

	Overlord
		Runs an Overlord procedure
		
		Syntax:
			Overlord/ <file path>{/ <variables to be set (optional)>}
			
		Examples:
			Overlord/ C:\Program Files (x86)\PAA\Overlord3\Procedures\Common\Add Lid.ovp
			Overlord/ C:\Program Files (x86)\PAA\Overlord3\Procedures\Common\Add Lid.ovp/ [Plates] 10 [Barcode] "12345678"
			
			
	Hamilton
		Runs a Hamilton method (on a computer with Hamilton Venus installed).
		Also saves the Metadata Dictionary (metaDictionary) to a parameters file that can be read by a Hamilton Venus program (C:\Program Files (x86)\HAMILTON\LMSF_FrontEnd\parameters.csv).
		
		Syntax:
			Hamilton/ <file path>
			
		Examples:
			Hamilton/ C:\Program Files (x86)\HAMILTON\Methods\GSF-IMS Project\Cell gradient plate.lmsf.hsl
			
		
	Timer
		Starts a timer that runs for a specified amount of time, or until a specified time or date-time.
		Parsing of time or date-time strings is done using: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tryparse?view=netframework-4.7.2.
		With a time or date-time parameter, the Parser also checks to be sure the time or date-time is in the future.
		
		Syntax:
			Timer/ <time in seconds (integer)>
			Timer/ <parsable time or date-time string>
			
		Examples:
			Timer/ 20
			Timer/ 5
			Timer/ 2000
			Timer/ 7:30pm
			Timer/ 2019-01-25 7:30pm
			
			
	WaitFor
		Pauses execution and waits for a previous step to finish
		
		Syntax:
			WaitFor/ <step to wait for>
			
		Examples:
			WaitFor/ Overlord
			WaitFor/ Timer
			
			
	NewXML
		Starts a new XML metadata document.
		Also, adds the protocol starting date and time to the Metadata Dictionary (key = "startDateTime") in a form that is suitable for use as an identifier: "yyyy-MM-dd-HHmm".
		Also, adds the protocol starting date to the Metadata Dictionary (key = "startDate") in a form that is suitable for use in file names/identifiers: "yyyy-MM-dd".
		
		The <protocol type> is meant to be a short, human-readable description of the function of the current protocol.
			It is also used to distinguish protocols in a multi-protocol experiment.
			The <protocol type> is saved in the Metadata Dictionary with the key "protocol type".
		
		Syntax:
			NewXML/ <protocol type>
			
		Examples:
			NewXML/ growth plate prep
			NewXML/ cytometry plate prep
			

	AppendXML
		Similar to NewXML, but opens an existing XML metadata document and adds to it.
		Also, adds the protocol starting date and time to the Metadata Dictionary (key = "startDateTime") in a form that is suitable for use as an identifier: "yyyy-MM-dd-HHmm".
		Also, adds the protocol starting date to the Metadata Dictionary (key = "startDate") in a form that is suitable for use in file names/identifiers: "yyyy-MM-dd".
		
		Syntax:
			AppendXML/ <protocol type>
			
		Examples:
			AppendXML/ growth plate prep
			AppendXML/ cytometry plate prep
			
			
	SaveXML
		Saves the XML metadata document.
		By default, this command also appends the "protocol finished" node to the dateTime node in the XML document.
		If the optional argument, "not finished" is used, the "protocol finished" node will not be appended.
		
		Syntax:
			SaveXML{/ not finished (optinal)}
			
		Examples:
			SaveXML/ 
			SaveXML/ not finished
			
			
	AddXML
		Adds a new node to the XML metadata document. 
		The name of the new node is <newNode>. It is added as a child to an existing node, <parentNode>.
		If the <parentNode> does not exist, it is added to the protocol node, with <newNode> as a child node.
		The inner text of the new node is set to <innerText>.
		
		Syntax:
			AddXML/ <parentNode> / <newNode>{/ <innerText (opyional)>}
			
		Examples:
			AddXML/ additive/ newNode/
			AddXML/ newNode/ testNewNode/ new node inner text
			
			
	UserPrompt
		Opens a message dialog box to prompt the user.
		The <message> string parameter is interpretted using string escape sequences ("\t" for tab, "\n" for new line).
			So, multi-line messages can be formateed and displayed.
			For a complete list of escape sequences, see https://blogs.msdn.microsoft.com/csharpfaq/2004/03/12/what-character-escape-sequences-are-available/
				Not all of the escape sequences on that list work as expected in the context of this command, so try them.
				If <message> includes an unrecognized escape sequence, the entire message will be displayed as a litteral string ignoring all escape sequences.
		
		Syntax:
			UserPrompt/ <title>/ <message>{/ <image file path (optional)>}
			
		Examples:
			UserPrompt/ Add Bacteria/ Add bacteria to growth plate, put plate in reader, and click 'OK'
			UserPrompt/ Add Bacteria/ Add bacteria to growth plate and click 'OK'/ C:\Users\djross\Documents\temp\spinner.PNG 
			UserPrompt/ Add Bacteria/ Add bacteria to growth plate, \nput plate in reader, and click 'OK'
			
			
	GetExpId
		Opens a user dialog box to get the experiment identifier and data directory from the user.
		The dialog starts with default/suggested values defined by the parameters.
		If no <default data directory> parameter is given, "C:\Shared Files\Data" is used.
		By default, the command creates a new directory with the same name as the experiment ID,
			So, the default file will be saved as "<default data directory>\<default experiment ID>\<default experiment ID>.xml"
		The user can manually override the defaults in the dialog or accept them.
		After the user confirms, GetExpId also adds the experiment ID (key = "experimentId"), and the data directory (key = "dataDirectory") to the Metadata Dictionary 
		
		Syntax:
			GetExpId/ <default experiment ID>{/ <default data directory (optional)>}
			
		Examples:
			GetExpId/ {startDateTime}-{strain1}
			GetExpId/ {startDateTime}-{strain1}/ C:\Users\djross\Documents\LMSF data
			

	Get
		Opens a user dialog box to get metadata information from the user, and saves the result in the Metadata Dictionary.
		
		The list of valid metadata types is: "media", "strain", "plasmid", "additive", "antibiotic", "project", "concentration", "note", and "number"
		
		The <key> parameter is meant to be a short, human-readable indentifier of the function of the media, strain, plasmid, etc. in the current experiment.
		It is also used as the key for storage of Get/ result in the metaDictionary.

		For metadata type "concentration", the user dialog gets the numeric value and units for the concentration.
		
		In the XML output, the result of a "Get/ concentration/..." command is attached to the last additive or antibiotic XML output (if there is one).
		So, a "Get/ concentration/..." command should be immediately after the matching "Get/ additive/..." command, so that the automated XML document script will attach them together correctly. 
		With a "Get/ concentration/ <key>" command, the concentration is saved in the Metadata Dictionaries (both of them); 
			the Concentration is saved as an object with both value and units in the concDictionary; 
			the numeric value and units are also saved in the metaDictionary using the keys "<key>Conc" and "<key>Units".
		
		If no <message prompt> parameter is given, the Get command will use the default prompt, "Select the <key> for the experiment: "
		The Get command will also use the default prompt if the <message prompt> parameter is "default".
		
		The optional <note> parameter and use of the "note" metadata type are different:
			Using "note" as a metadata type gets notes from the user and adds them in a "note" node to the XML protocol node.
			The optional <note> parameter can be used by the protocol programmer to add notes to any of the other metadata type nodes.
			So, a "note" is created by the user when the automation protocol is run, whereas a <note> is created by the programmer when the protocol is written.

			Also, adding a <note> parameter to a "note" metadata doesn't do anything.

		
		
		Syntax:
			Get/ <metadata type>/ <key>{/ <message prompt(optinal)>/ <note (optional)>}
			
		Examples:
			Get/ strain/ strain1
			Get/ media/ baseMedia
			Get/ additive/ inducer
			Get/ additive/ inducer/ Select the inducer used for the left side of the plate:
			Get/ additive/ inducer/ default/ note to add to the XML file
			Get/ concentration/ inducerStock
			
			
	Set
		Directly sets an entry in the Metadata Dictionary.
		
		Syntax:
			Set/ <key>/ <value>
			
		Examples:
			Set/ count/ 20
			Set/ strain/ MG1655
			
			
	StartPrompt
		Opens a message dialog box for the start of a protocol. Lists the protocol requirements and offers 'OK' or 'Abort'.
		The protocol title appears near the top of the dialog
		The list file is a text file with a list of requirements. The contents of the list file will be displayed in the dialog exactly as they are in the text file.
		
		Syntax:
			StartPrompt/ <protocol title>/ <list file path>
			
		Examples:
			StartPrompt/ Inducer Gradient Plus Bacteria/ C:\Program Files (x86)\HAMILTON\Methods\GSF-IMS Project\Inducer gradient plus 1000x bacteria-list.txt
			

Metadata Dictionary:
	The LMSF Scheduler has two Dictionary objects that effectively give the user the ability to create, store, and access variables for use across multiple steps.
	The first dictionary is for storage of string identifiers, the second is for storage of concentrations.
	The Metadata Dictionaries (metaDictionary and concDictionary in the C# code) consist of key-value pairs. 
	A value can be saved in one of the dictionaries, either directly with a Set/ command or using a user dialog command such as Get/.
	Values in either dictionary can then be accessed using the "{key}" syntax in a subsequent parameter entry.
		The command parser first looks for a key in the string identifier dictionary (metaDictionary),
		and then looks in the concentration dictionary if the key is not found in the string identifier dictionary.
		So, it is possible to use the same key to store values in both dictionaries, but the parser will only be able to find the corresponding value in the string dictionary.
		It is reccomended to use related, but not identical keys for matching additive identifiers and concentrations,
			for example, "Get/ additive/ inducer" followed by "Get/ concentration/ inducer stock"
			
		If the command parser finds the requested key in one of the dictionaries, it replaces the sub-string, "{<key>}", with the sub-string "<value>" in the parameter string.
	
