Steps are entered into the "Steps Input:" text box; one step per line.
Blank lines are ignored.
Lines can be commented out with two forward slashes at the start of the line ("//"). Commented lines will be ignored.

Step syntax:
<Command>/<parameter(s)>

The Command and parameters are separated by a foreward slash "/"
    White space before/after the slash is ignored
	So,
	    <Command>/<parameter(s)>
		<Command>/ <parameter(s)>
		<Command> / <parameter(s)>
	all get read the same way.
	
If a Command takes multiple parameters, they are also seprated by commas/semicolons.

The parsing of Cammands and parameters is case sensitive.

Parameters can generally contain any character except "/" which is used as a command-parameter separator.

Parameters can contain key references, demarked by "{" and "}". The parser will replace the text, "{<key>}" with "<value>", where <key> and <value> are a key-value pair in the Metadata Dictionary (see below).
	For example, the input step:
		UserPrompt/ Test/ abc {testKey} def {testKey} ghi
	get's parsed as:
		User Prompt/ Test/ abc testValue def testValue ghi
Key references that are not in the Metadata Dictionary will result in a Validation failure.


Commands:

	Overlord
		Runs an Overlord procedure
		
		Syntax:
			Overlord/ <file path>{/ <variables to be set (optional)>}
			
		Examples:
			Overlord/ C:\Program Files (x86)\PAA\Overlord3\Procedures\Common\Add Lid.ovp
			Overlord/ C:\Program Files (x86)\PAA\Overlord3\Procedures\Common\Add Lid.ovp/ [Plates] 10 [Barcode] "12345678"
			
		
	Timer
		Starts a timer that runs for a specified amount of time, or until a specified time or date-time.
		Parsing of time or date-time strings is done using: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tryparse?view=netframework-4.7.2.
		With a time or date-time parameter, the Parser also checks to be sure the time or date-time is in the future.
		
		Syntax:
			Timer/ <time in seconds (integer)>
			Timer/ <parsable time or date-time string>
			
		Examples:
			Timer/ 20
			Timer/ 5
			Timer/ 2000
			Timer/ 7:30pm
			Timer/ 2019-01-25 7:30pm
			
			
	WaitFor
		Pauses execution and waits for a preivous step to finish
		
		Syntax:
			WaitFor/ <step to wait for>
			
		Examples:
			WaitFor/ Overlord
			WaitFor/ Timer
			
			
	NewXML
		Starts a new XML metadata document
		
		Syntax:
			NewXML/ <experiment step>
			
		Examples:
			NewXML/ growth plate prep
			NewXML/ cytometry plate prep
			

	AppendXML
		Similar to NewXML, but opens an existing XML metadata document and adds to it
		
		Syntax:
			AppendXML/ <experiment step>
			
		Examples:
			AppendXML/ growth plate prep
			AppendXML/ cytometry plate prep
			
			
	SaveXML
		Saves the XML metadata document. The SaveXML step does not take any parameters
		
		Syntax:
			SaveXML/
			
			
	UserPrompt
		Opens a message dialog box to prompt the user.
		
		Syntax:
			UserPrompt/ <title>/ <message>{/ <image file path (optional)>}
			
		Examples:
			UserPrompt/ Add Bacteria/ Add bacteria to growth plate, put plate in reader, and click 'OK'
			UserPrompt/ Add Bacteria/ Add bacteria to growth plate and click 'OK'/ C:\Users\djross\Documents\temp\spinner.PNG 
			
			
	Set
		Directly sets an entry in the Metadata Dictionary.
		
		Syntax:
			Set/ <key>/ <value>
			
		Examples:
			Set/ count/ 20
			Set/ strain/ MG1655
			

	Get
		Opens a user dialog box to get metadata information from the user, and saves the result in the Metadata Dictionary.
		The list of valid metadata types is: "media", "strain", "plasmid", "additive", "antibiotic", and "project"
		
		Syntax:
			Get/ <metadata type>/ <key>{/ <message prompt(optinal)>}
			
		Examples:
			Get/ strain/ strain1
			Get/ media/ baseMedia
			Get/ additive/ inducer
			Get/ additive/ inducer/ Select the inducer used for the left side of the plate:
			

Metadata Dictionary:
	The LMSF Scheduler has a Dictionary object that effectively gives the user the ability to create, store, and access variables for use across multiple steps.
	The Metadata Dictionary (metaDictionary in the C# code) consists of key-value pairs. 
	A value can be saved in the dictionary, either directly with a Set/ command or using a user dialog command such as Get/.
	Values can then be accessed ising the "{key}" syntax in a parameter entry.
	
