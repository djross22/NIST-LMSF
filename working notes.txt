Overlord Simulator: add argument parsing for -r, -c, -m, -v

Overlord Simulator: add scrollbars to ovp xml textbox

Overlord Simulator: add ListView to display Overlord input variables

Overlord Simulator: add test Dictionary object to display to variables ListView

Overlord Simulator: add code to display variables set from command line to ListView

Overlord Simulator: Add animation to progress bar for simTime

Overlord Simulator: Add Pause/Resume button for simulation time; Implement -c option (close when done)

Overlord Simulator: Add Stop Now button for simulation time;

Overlord Simulator: Implement -r (run immediately), and -m (run minimized) options

Overlord Simulator: Implement code to handle when no command line arguments are passed

Overlord Simulator: Disable Pause button when sim progress finishes (if -c option not given)

Overlord Simulator: Add LMSF icon


LMSF Scheduler: Setup App layout, menu bar, and tool bar

LMSF Scheduler: Add ListView and Panel to display experiment steps, and buttons (Add, Duplicate, Delete, Move Up, Move Down) to organize steps

LMSF Scheduler: Add AutomationStep class to hold info about each automation step

LMSF Scheduler: Add ListOfSteps ObservableCollection and have it displayed in the ListBox with a DataTemplate

LMSF Scheduler: Add StepIcon as property for AutomationStep class and display icon in ListBox w/ DataTemplate

LMSF Scheduler: Add event handling for addStep Button with place-holder ListOfSteps.Add()

LMSF Scheduler: Add ContentControl on right hand side of main Window to display details of selected text, and implement place-holder code for data Binding

LMSF Scheduler: Add INotifyPropertyChanged interface to Main Window class, also add test buttons and text boxes to test data binding

LMSF Scheduler: Change Add Step code to add step after selected step )instead of at end of Collection 

LMSF Scheduler: Implement code for Duplicate Step button 

LMSF Scheduler: Add wait and dialog icons to AutomationStep class 

LMSF Scheduler: Implement code for Delete Step, Move Up, and Move Down buttons 

LMSF Scheduler: Add Dialog box for Add New Step 

LMSF Scheduler: Add Rodio buttons to select step type for Add New Step 

LMSF Scheduler: Take out temporary ListOfSteps initialization code, and edit Add, Duplicate, Delete, ect methods to deal appropriately with empty list

LMSF Scheduler: Add LMSF icon bitmap as default image for steps

LMSF Scheduler: Switch to purely text-based step editing and specification; make new branch, graphicStepEditor, for old GUI
                  In new method, replace ListBox with TextBox, and remove buttons for manipulating steps (Add, Duplicate, etc.)

LMSF Scheduler: Add code for Open/Save/SaveAs, and deal with Focus issue for menu items (IsFocusScope="False")

LMSF Scheduler: Add button and code for "Insert File Path" - to insert the selected file path into the InputText

LMSF Scheduler: Make input and output Text Boxes accept enter, nowrap, auto scroll bars; fix Binding/Focus issue for Toolbar items (IsFocusScope="False")

LMSF Scheduler: Finish File menu functions, and add code to prompt for file save when inputText has changed as appropriately

LMSF Scheduler: Fix code for "Insert File Path" so that file path string is inserted at the textBox caret location; 
    insert ParseSteps() method to break up inputText into lines; Add Rewind button; Add blank button click handlers for Play, Step, Pause, etc.

LMSF Scheduler: Add inputTextBox.Focus() at the end of each menu item action to return focus to the text box

LMSF Scheduler: Add filename to main window title, with * to indicate unsaved changes

LMSF Scheduler: Rename "startButton" -> "playButton"; add fields for parsing and running steps; and add test code for line/step parsing

LMSF Scheduler: Add validate button to test string parsing; fix tooltip text for other buttons

LMSF Scheduler: Add Overlord to step parser; Add basic validation method run when validateButton clicked (same as Play, but sets isValidating flag so actual actions can be turned off)

LMSF Scheduler: Add System.Diagnostics.Process code to run Overlord.Main.exe

Overlord Simulator: Set Main window icon =  LMSF icon

LMSF Scheduler: Switch path to Ovderlord.Main.exe to actual location (C:\Program Files (x86)\PAA\Overlord3)

Overlord Simulator: Capitalize method names to conform with reccomended C# style

LMSF Scheduler: Add code to wait between steps (clunky right now since it runs on the main thread, TODO: set it up to run steps on a separate thread)

LMSF Scheduler: Wrap waitingForStepCompletion in a propety with getter and setter

LMSF Scheduler: Run Steps on separate (BackgroundWorker) thread so that GUI updates are maintained

LMSF Scheduler: Modifiy ValidateButton_Click() to work with new multi-thread methods (validation runs like play but on main thread)

LMSF Scheduler: Add code to check for existence of ovp files during validation/running

LMSF Scheduler: Add Validation before every run

LMSF Scheduler: Change output text box to have line wrapping

LMSF Scheduler: Add Wait step to step parser; also add RunWaitStep() method, TODO: re-write RunWaitStep() with pop-up progress bar + cancel button

LMSF Scheduler: Rearange RunWaitStep() method; move WaitingForStepCompletion = false to OutsideProcessMonitor_RunWorkerCompleted; Rename ovWorker -> ovMonitorWorker

LMSF Scheduler: Move Background worker that waits for Overlord into a different step.
    So now, Overlord steps start Overord and go on to the next step;
	The new "WaitFor" step is then used to specifically wait for the Overlord step to finish; 
	Also included code to prevent two Overlord processes from running at the same time

Add new LMSF_Utilities library to solution

LMSF_Utilities: Add TimerDialog
LMSF Scheduler: Add test code for TimerDialog (on TestButton_Click)

LMSF_Utilities.TimerDialog: Add IsClosed Property to allow Scheduler to check if the TimerDialog has closed.

LMSF Scheduler: In StepParser(), replace Wait step with Timer step; Also replace RunWaitStep() with RunTimer()

Switch from "BackgroundWorker runStepsWorker" to "Thread runStepsThread" to create the thread that handles running steps,
    Why? Since I thought "thread.SetApartmentState(ApartmentState.STA)" would be necessary to access GUI components (like the TimerDialog)
	    from the step-runner thread. It turns out that is not true (program seems to run just fin with the SetApartmentState commented out).
		What is actually needed is to use a Dispatcher for lines of code in the step-runner methods that interact with the GUI,
    		e.g., this.Dispatcher.Invoke(() => { IsRunning = false; });  
			    "IsRunning" calls "UpdateEnabledState" which sets the enabled state of GUI components appropriatly
	Anyway, I'm not sure if the Dispatcher thing would have worked in a background thread, and I don't want to take the time to find out, since the code now works.
	
	Notes added later: the Dispatcher things works from a background worker; I used it to display the time remaining in the TimerDialog class.

LMSF Scheduler: Make play, pause, etc. buttons not focusable, and then insert "inputTextBox.GetBindingExpression(TextBox.TextProperty).UpdateSource();"
    at the beginning of each button clicked method to makse sure the inputText gets updated appropriately.

LMSF Scheduler: Finish single-step button method, and implement abort button method

LMSF Scheduler: On main page, add visual indicator of run/paused state and abort called - with red/yellow/green colors

LMSF Scheduler: Add WaitForTimer() method and code to ParseSteps()

LMSF_Utilities: Add SharedParameters Class for storage of constants used by Utility methods

LMSF_Utilities: Add MetaItem class; and SharedParameters.GetMetaList() method to parse meta-item lists

LMSF_Utilities: Add SharedParameters.SortMetaList() method

LMSF_Utilities: Add SharedParameters.SortAndSaveMetaList() method; fix encoding issue that caused problems with Hamilton Venus (use default encoding instead of UTF8)

LMSF_Utilities: Add new class: SelectMetaIdentDialog, with placeholder code for CreateNewIdentier() methods

LMSF_Utilities: Finish GetMetaIdentifier(), and most of CreateNewIdentier() (still has some TODO commetns in it)

LMSF_Utilities: Add RegexValidationRule() and bindings to enforce validity of short identifiers in NewMetaIdentDialog

LMSF_Utilities: Add NewLongNameDialog, NotesDialog

LMSF_Utilities: Add NotesDialog and finish code for CreateNewIdentier()

LMSF_Utilities: Set up Combo boxes to initially have slectedIndex = -1 (no item selected)

LMSF_Utilities.GetMetaIdentifier: On cancel, make sure GetMetaIdentifier returns empty string.

LMSF_Utilities: Finish CreateNewMediaIdentifier() and MediaIngredientsDialog class

LMSF_Utilities: Add ConcentrationDialog class

LMSF Scheduler: Reorganize ParseSteps() method with Local functions to parse each step type

LMSF Scheduler: Fix Bug: Output does not show/update text for variables passed to Overlord

LMSF Scheduler: Add/midify code to properly deal with Main Window closing - either through the red 'X' or the File.Close()

LMSF Scheduler: Fix Bug: inputTextBox.GetBindingExpression(TextBox.TextProperty).UpdateSource(); - causes InputChanged <- true, even when it has not changed;
    slight change in Setter to fix

LMSF Scheduler: Fix Bug: Will not Validate after Aborted run;

LMSF Scheduler: display validation result prominently with gree/red colr to indicate success/fail

LMSF Scheduler: Put DateTime info in Output text;

LMSF Scheduler: Add Running/Validating and ExperimentFileName to beginning of OutputText

LMSF Scheduler: Add saving of output text to log file

LMSF Scheduler: Add ComboBox on toolbar for shortcuts to insert Command into InputText

LMSF Scheduler: Move InsertFileButton to tool bar

LMSF Scheduler: Change WaitForOverlord() output to "... waiting for Overlord to finish and exit."

LMSF Scheduler: Add code to create log file directory if it does not exist, also changed the log file directory to: "C:\\Shared Files\\LMSF Scheduler\\LogFiles\\"

LMSF Scheduler: Change format for log file name to , "yyyy-MM-dd HH.mm.ss"

LMSF Scheduler: Turn play and step buttons yellow when waiting to resume from pause; also use predefined Brushes everywhere else: Brushes.NamedBrush

LMSF Scheduler: Add "Method Aborted." to log file

LMSF Scheduler: "project" to metadata type (same dialogs as additive/antibiotic)

LMSF Scheduler: Add local method, ParseGenericStep(), in ParseSteps(), as a template for new local parse methods

LMSF Scheduler: NewXML and SaveXML steps to ParseSteps(); and RunNewXml() and RunSaveXml() methods

LMSF Scheduler: Add  AddXmlStep() method, and argument handling in ParseNewXml() to assign value to experimentStep attribute in XML aoutput

LMSF_Utilities: Add GetDateTimeString() method for consistent formatting of DateTime string: "yyyy-MM-dd HH:mm:ss", for everything except log file names

LMSF Scheduler: Add  AddXmlStep() method, and argument handling in ParseNewXml() to assign value to experimentStep attribute in XML aoutput

LMSF Scheduler: Change code for RunNewXml() so that if 'Cancel' is selected at the "select project" dialog, the run will abort

LMSF Scheduler: Allow commenting input lines with "//"

LMSF Scheduler: Change XML schema a bit: metadata/project/protocol/<step> instead of metadata/project/experimentStep/<step>

LMSF Scheduler: Fix "procedure started" and "procedure finished" bugs 

LMSF Scheduler: AddDateTimeNodes(XmlNode parentNode)

LMSF Scheduler: Add datetime info to protocol start/finish in XML;

LMSF Scheduler: Change signature of RunTimer() method to RunTimer(int num, string[] args) to be consistent with other RunXxxx() methods

LMSF Scheduler: Add command: WaitFor, DateTime

LMSF Scheduler: Add command: AppendXML

LMSF Scheduler: Add command: UserPrompt; make shortcut drop-down box a bit wider

LMSF Scheduler: Change command-argument separator to foreward slash "/" - to allow use of commas and semicolons in arguments.

LMSF Scheduler: Add key syntax to arguments: any {keyString}, inclosed with "{" and "}", in an inputText argument will be replaced with the corresponding value from the metaDictionary

LMSF Scheduler: Add Set command to directly set entries in metaDictionary

LMSF Scheduler: Add Get command, calls up a user dialog to get a metadata type and saves the result in the metaDictionary

LMSF_Utilities: Fix Bug; "none" not showing up in parent list for create new identifier

LMSF Scheduler: Add "Validate with User Input" check box - when checked, the validate method goes through all the user dialogs

LMSF Scheduler: Add XML metadata output at end of RunGet() method

LMSF Scheduler: Add concDictionary (Dictionary<string, Concentration>) to store user input concentrations

LMSF Scheduler: Add Get/ concentration/... command, with automated XML output

LMSF Scheduler: Change default prompt on Get/ command to use the "key" instead of "type"

LMSF Scheduler: Add code to NewXML/ command: automatically add the protocol type to the metadata dictionary, metaDictionary["protocol type"] = protocolType;

LMSF Scheduler: Add "default" as prompt parameter in Get/ command; update help file

LMSF Scheduler: Fix bug: When 'Cancel' selected in Get/ concentration/..., the run needs to abort before trying to reference the concentration object, which is null.

LMSF_Utilities: User prompt dialog open in center of screen

LMSF Scheduler: Fix Bug: "/" getting insterted when short-cut comboBox returns null

LMSF_Utilities: Add GetExperimentId Dialog and method

LMSF Scheduler: Implement GetExpID/ command and RunGetExpId()
        Also, modify signature of AddDateTimeNodes(DateTime dt, XmlNode parentNode, string statusStr) to take DateTime object as first argument (so it can add dateTime info other than DateTime.Now)

LMSF Scheduler: Fix Bug in "Get/ concentration" command- concentration node was being appended to the additives instead of the last additive node 

LMSF Scheduler: In GetExpID/ command, delete automatically created directory if it is not used (user choosed to same xml file somewhere else)

LMSF Scheduler: Add command: Get/ notes/ <key>/ <prompt>, to get notes from the user and append them as a notes node to the protocol node in the XML document


LMSF Scheduler: Add commands: Hamilton/ <method file>, and WaitFor/ Hamilton, to run Hamilton Venus methods (similar to Overlord/ command)




TODOs-


Add startDate to metaDictionary (same string as startDateTime, but without the time)



Save Set/ to XML doc



Attune front end? 4 buttons: Startup, perf test, run experiment, shutdown
	Uses LMSF Scheduler and Utilities code





Open timer dialog near top of screen?


Open Overlord to edit procedure button

control which screen Overlord opens on (screen one preferred)

Comnbine MetaList.csv files from multiple sources (STAR and Overlord Main)








one-line constructors for custom dialogs



Copy functionality from Venus LMSF Utilities library

User input steps: need C# metadata -> xml?


(Probably) Hard-to-do stuff:

Highlight lines in output that have errors (or change text to red)
    would require changing to a RichTextBox and more complicated text entry
	Still need to figure out Binding - since the idea I had to bind to the Document Property of the Control doesn't work
	
	    First, switch the Binding Property from OutPutText to OutPutDocument (Document class)
	
	    Then, change return type of the ParseStep() method to Paragraph
		
	    Then, in the Step() method, replace  the line,
		    OutputText += ParseStep(stepNum, inputSteps[stepNum]); 
	    with:
		    OutPutDocument.Blocks.Add(ParseStep(stepNum, inputSteps[stepNum]));
			
		And in the ParseStep() method, at the end, 
			Paragraph newOutText = new Paragraph();
			newOutText.Inlines.Add(outString);
			newOutText.FontWeight = FontWeights.Bold; - if validation error
			newOutText.Foreground = Brushes.Red; - or Black if passed validation
			
			return newOutText;



Add code to make sure Overlord is started before leaving RunOverlord() - since it is a bit slow to start up
    Couldn't figure out how to do that- tabling it for now.














"C:\Program Files (x86)\PAA\Overlord3\Procedures\Common\Peel Plate.ovp" -r -c -v [Plates] 10 [Barcode] "12345678" [Gen5.Protocol.Path] "C:\Gen5 Path..."